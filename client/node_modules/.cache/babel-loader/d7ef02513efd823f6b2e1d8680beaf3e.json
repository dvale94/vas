{"ast":null,"code":"import request from 'request';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport serverConf from '../config';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types'; // login - get user token\n\nexport const loginUser = form => dispatch => {\n  const endpoint = `${serverConf.uri}${serverConf.endpoints.account.login}`;\n  request.post(endpoint, {\n    form\n  }, (error, response, body) => {\n    const res = JSON.parse(body);\n    const token = res.token;\n\n    if (error || !res.token) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.body\n      });\n    } else {\n      // save token to localStorage\n      localStorage.setItem('jwt', token); // set token to auth header\n\n      setAuthToken(token); // decode token to get user data\n\n      const decoded = jwt_decode(token); // set current user\n\n      dispatch(setCurrentUser(decoded));\n    }\n  });\n}; // set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // user loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // log user out\n\nexport const logoutUser = () => dispatch => {\n  // remove token from local storage\n  localStorage.removeItem('jwt'); // remove auth header for future requests\n\n  setAuthToken(false); // set current user to empty object which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/daniel/Desktop/vas/client/src/actions/authActions.js"],"names":["request","setAuthToken","jwt_decode","serverConf","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","loginUser","form","dispatch","endpoint","uri","endpoints","account","login","post","error","response","body","res","JSON","parse","token","type","payload","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AAEzC,QAAMC,QAAQ,GAAI,GAAEP,UAAU,CAACQ,GAAI,GAAER,UAAU,CAACS,SAAX,CAAqBC,OAArB,CAA6BC,KAAM,EAAxE;AAEAd,EAAAA,OAAO,CAACe,IAAR,CAAaL,QAAb,EAAuB;AAAEF,IAAAA;AAAF,GAAvB,EAAiC,CAACQ,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AAExD,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAZ;AACA,UAAMI,KAAK,GAAGH,GAAG,CAACG,KAAlB;;AAEA,QAAIN,KAAK,IAAI,CAACG,GAAG,CAACG,KAAlB,EAAyB;AACrBb,MAAAA,QAAQ,CAAC;AACLc,QAAAA,IAAI,EAAEnB,UADD;AAELoB,QAAAA,OAAO,EAAER,KAAK,CAACE;AAFV,OAAD,CAAR;AAIH,KALD,MAMK;AACD;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BJ,KAA5B,EAFC,CAID;;AACArB,MAAAA,YAAY,CAACqB,KAAD,CAAZ,CALC,CAOD;;AACA,YAAMK,OAAO,GAAGzB,UAAU,CAACoB,KAAD,CAA1B,CARC,CAUD;;AACAb,MAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH;AACJ,GAxBD;AAyBF,CA7BK,C,CA+BP;;AACA,OAAO,MAAMC,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHJ,IAAAA,IAAI,EAAElB,gBADH;AAEHmB,IAAAA,OAAO,EAAEG;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAO;AACHN,IAAAA,IAAI,EAAEjB;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMwB,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AAExC;AACAgB,EAAAA,YAAY,CAACM,UAAb,CAAwB,KAAxB,EAHwC,CAKxC;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CANwC,CAQxC;;AACAQ,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAVM","sourcesContent":["import request from 'request';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport serverConf from '../config'\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types';\n\n// login - get user token\nexport const loginUser = form => dispatch => {\n\n    const endpoint = `${serverConf.uri}${serverConf.endpoints.account.login}`;\n\n    request.post(endpoint, { form }, (error, response, body) => {\n        \n        const res = JSON.parse(body);\n        const token = res.token\n\n        if (error || !res.token) {\n            dispatch({\n                type: GET_ERRORS,\n                payload: error.body\n              })\n        }\n        else {\n            // save token to localStorage\n            localStorage.setItem('jwt', token);\n            \n            // set token to auth header\n            setAuthToken(token);\n\n            // decode token to get user data\n            const decoded = jwt_decode(token);\n\n            // set current user\n            dispatch(setCurrentUser(decoded))\n        }    \n    });\n };\n\n// set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// user loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// log user out\nexport const logoutUser = () => dispatch => {\n\n    // remove token from local storage\n    localStorage.removeItem('jwt');\n\n    // remove auth header for future requests\n    setAuthToken(false);\n\n    // set current user to empty object which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}