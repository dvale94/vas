let express,jwt,validateLoginInput;_5c6‍.x([["default",()=>_5c6‍.o]]);_5c6‍.w("express",[["default",["express"],function(v){express=v}]]);_5c6‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_5c6‍.w("../validation/login",[["default",["validateLoginInput"],function(v){validateLoginInput=v}]]);


const User = require('../models/user')
const UserSession = require('../models/userSessions')

// input validation


const router = new express.Router();

router.post('/signup', signUp);
router.post('/login', login);
router.get('/verify', verify);
router.get('/logout', logout);

function signUp (req, res) {
    const { body } = req;
    const { 
        firstName,
        lastName,
        password,
        } = body;
        let {
            email
        } = body;

        if (!firstName) {
            return res.send({
                success: false,
                message: 'Error: First name cannot be blank.'
            });
        }
        if (!lastName) {
        return res.send({
            success: false,
            message: 'Error: Last name cannot be blank.'
        });
    }
    if (!email) {
        return res.send({
            success: false,
            message: 'Error: Email cannot be blank.'
        });
    }
    if (!password) {
        return res.send({
            success: false,
            message: 'Error: Password cannot be blank'
        });
    }

    email = email.toLowerCase();

    // Steps:
    // 1. Verify email doesn't exist
    // 2. Save
    User.find({
        email: email
    }, (err, previousUsers) => {
        if (err) {
            return res.send({
                success: false,
                message: 'Error: Server error'
            });
        } else if (previousUsers.length > 0) {
            return res.send({
                success: false,
                message: 'Error: Account already exists.'
            });
        }

        // Save new user
        const newUser = new User();

        newUser.email = email;
        newUser.firstName = firstName;
        newUser.lastName = lastName;
        newUser.password = newUser.generateHash(password);
        newUser.save((err, user) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server error'
                });
            }
            return res.send({
                success: true,
                message: 'Signed up'
            });
        });
    });
}

function login (req, res) {
    const { body } = req;
    const { 
        password,
        } = body;
        let {
            email
        } = body;

    if (!email) {
        return res.send({
            success: false,
            message: 'Error: Email cannot be blank.'
        });
    }
    if (!password) {
        return res.send({
            success: false,
            message: 'Error: Password cannot be blank'
        });
    }

    email = email.toLowerCase();

    User.find({
        email: email
    }, (err, users) => {
        if (err) {
            return res.send({
                success: false,
                message: 'Error: Server error'
            });
        }
        if (users.length != 1) {
            return res.send({
                success: false,
                message: 'Error: Invalid'
            });
        }

        const user = users[0];
        if (!user.validPassword(password)) {
            return res.send({
                success: false,
                message: 'Error: Invalid'
            });
        }

        const userSession = new UserSession();
        userSession.userId = user.id;
        userSession.save((err, doc) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server error'
                });
            }
            
            return res.send({
                success: true,
                message: 'Valid Signin',
                token: doc._id
            });
        });
    })
}

function verify (req, res) {
    const { query } = req;
    const { token } = query;

    UserSession.find({
        _id: token,
        isDeleted: false
    }, (err, sessions) => {
        if (err) {
            return res.send({
                success: false,
                message: 'Error: Server error'
            });
        }

        if (sessions.length != 1) {
            return res.send({
                success: false,
                message: 'Error: Invalid'
            });
        } else {
            return res.send({
                success: true,
                message: 'Good'
            });
        }
    });
}

function logout (req, res) {
    const { query } = req;
    //const { token } = query;

    _5c6‍.g.console.log(req.body)

    UserSession.findOneAndUpdate({
        //_id: token,
        isDeleted: false
    }, {
        $set:{
            isDeleted: true,
        }
    }, null, (err, sessions) => {
        if (err) {
            return res.send({
                success: false,
                message: 'Error: Server error'
            });
        }

        return res.send({
            success: true,
            message: 'Good'
        });
    });
}

_5c6‍.d({router});